plugins {
	id 'org.springframework.boot' version '2.6.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	/** Querydsl plugin **/
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	/** AsciiDoc convert plugin **/
	id "org.asciidoctor.convert" version "1.5.9.2"
	/** restdocs-api plugin **/
	id 'com.epages.restdocs-api-spec' version '0.15.1'
	id 'jacoco'
	id 'java'
}

group = 'site.hirecruit'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	/** jpa **/
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	/** querydsl **/
	implementation("com.querydsl:querydsl-jpa")
	implementation("com.querydsl:querydsl-apt")
    implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	/** querydsl in test **/
	testCompileOnly("org.projectlombok:lombok")
	testAnnotationProcessor("org.projectlombok:lombok")
	/** validation **/
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	/** web **/
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	/** lombok **/
	compileOnly 'org.projectlombok:lombok'
	/** h2DB **/
	runtimeOnly 'com.h2database:h2'
	/** lombok **/
	annotationProcessor 'org.projectlombok:lombok'
	/** swagger **/
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.5'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'

	/** security **/
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.session:spring-session-data-redis'

	/** for test **/
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.mockito:mockito-core:3.+'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.15.1'


	/** *.adoc file {snippets} auto setting **/
	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.3.RELEASE'
}

test {
	useJUnitPlatform()

	// 자동으로 모든 Test 타입의 task에 JacocoTaskExtension을 추가하고, test task에서 그 설정을 변경할 수 있게 합니다.
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacoco.exec")
	}

	// test task를 실행할 때 마다 자동으로 jacoco task 가 실행되도록 함.
	finalizedBy 'jacocoTestReport'
}

jacoco {
	// JaCoCo 버전
	toolVersion = '0.8.5'
}

/**
 * 바이너리 커버리지 결과를 사람이 읽기 좋은 형태의 리포트로 저장합니다.
 */
jacocoTestReport {
	reports {
		// 원하는 리포트를 켜고 끌 수 있습니다.
		html.enabled true

		//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
		html.destination file("$buildDir/jacocoReportsHtml")
	}

	// jacocoTestCoverageVerification:: "Qdomain 커버리지에서도 제외" jacocoTestReport:: "Qdomain 결과에서도 제외"
	def Qdomains = []
	for(qPattern in "**/QA" .. "**/QZ"){
		Qdomains.add(qPattern+"*")
	}

	afterEvaluate {

		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [] + Qdomains)
		}))
	}

}

/**
 * 커버리지 기준을 만족하는지 확인해 주는 task
 */
jacocoTestCoverageVerification {

	// Qdomain 을 for loop 를 통해 excludes 시킴
	def Qdomains = []
	for (qPattern in "*.QA".."*.QZ") {  // qPattern = "*.QA","*.QB","*.QC", ... "*.QZ"
		Qdomains.add(qPattern + "*")
	}

	violationRules {
		rule {
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.50
			}

			excludes = [] + Qdomains
		}
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

/**
 * 매번 Report task와 Verification task를 하나로 묶는 task 입니다. <br>
 * 실행은 아래와 같이 하면 됩니다.
 *
 * ./gradlew tasks
 */
task testCoverage(type: Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}


/**
 * Querydsl config
 */

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	library = "com.querydsl:querydsl-apt"
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

/**
 * Spring REST Docs config
 */

ext {
	snippetsDir = file('build/generated-snippets') // (2)
}

/** gradle build process [test -> asciidoctor] **/
asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

/** rest docs file location ./build/asciidoc/html5/ **/
task copyDocument(type: Copy) {
	dependsOn asciidoctor

	from file("build/asciidoc/html5/")
	into file("src/main/resources/static/docs")
}

/** rest docs api config **/
openapi3{
	println("openapi3 task execute")

	server = 'https://localhost:8080' // your server host:port
	title = 'demo API' // {application name} API
	description = 'demo API description' // define your API description
	tagDescriptionsPropertiesFile = 'src/docs/tag-descriptions.yml' // tag properties file location
	version = '0.0.1' // your application version
	format = 'yml' // yml is file extension for the yaml file format
}

/**
 * for spring application
 */

build {
	// copyDocument task execute
	dependsOn copyDocument
	// build with openapi3 task
	finalizedBy 'openapi3'
}